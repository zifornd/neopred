/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: '.*:PREPROCESS_STAR:STAR_ALIGN' {
        ext.args   = '--readFilesCommand zcat --outReadsUnmapped None --chimSegmentMin 12 --chimJunctionOverhangMin 12 --chimOutJunctionFormat 1 --alignSJDBoverhangMin 10 --alignMatesGapMax 1000000 --alignIntronMax 1000000 --alignSJstitchMismatchNmax 5 -1 5 5 --outSAMstrandField intronMotif --outSAMunmapped Within --chimMultimapScoreRange 10 --chimMultimapNmax 10 --chimNonchimScoreDropMin 10 --peOverlapNbasesMin 12 --peOverlapMMp 0.1 --genomeLoad NoSharedMemory --outSAMheaderHD @HD VN:1.4 --twopassMode Basic --quantMode TranscriptomeSAM'
        publishDir = [
            [
                path: { "${params.outdir}/star/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { params.save_align_intermeds ? "${params.outdir}/star" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                saveAs: { params.save_align_intermeds ? it : null }
            ],
            [
                path: { params.save_unaligned ? "${params.outdir}/star/unmapped" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                saveAs: { params.save_unaligned ? it : null }
            ]
        ]
    }

    withName: '.*:RSEQC:RSEQC_DOWNSAMPLING' {
                publishDir = [
                    path: { "${params.outdir}/rseqc/down_sample" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bam}',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }


    withName: '.*:RSEQC:BEDTOOLS_INTERSECT' {
                publishDir = [
                    path: { "${params.outdir}/rseqc/down_sample" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bam}',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

    withName: '.*:RSEQC:RSEQC_TIN' {
                publishDir = [
                    path: { "${params.outdir}/rseqc/tin" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{txt}',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

    withName: '.*:RSEQC:RSEQC_READDISTRIBUTION' {
                publishDir = [
                    path: { "${params.outdir}/rseqc/read_distribution" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{txt}',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

    withName: '.*:RSEQC:RSEQC_JUNCTIONSATURATION' {
                publishDir = [
                    [
                        path: { "${params.outdir}/rseqc/junction_saturation/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/star/rseqc/junction_saturation/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }

    withName: '.*:RSEQC:RSEQC_GENEBODYCOVERAGE' {
                publishDir = [
                    [
                        path: { "${params.outdir}/rseqc/gene_body_coverage/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/rseqc/gene_body_coverage/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }

    withName: '.*:RSEQC:RSEQC_TINSUMMARY' {
                publishDir = [
                    path: { "${params.outdir}/rseqc/tinsummary" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{txt}',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

    withName: '.*:RSEQC:RSEQC_READDISTRIBUTIONMATRIX' {
                publishDir = [
                    path: { "${params.outdir}/rseqc/read_distributionmatrix" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{tab}',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

    withName: '.*:QUANTIFY_SALMON:SALMON_QUANT' {
            ext.args   = { params.extra_salmon_quant_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/salmon" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
            ]
        }

    withName: '.*:QUANTIFY_SALMON:TX2GENE' {
        publishDir = [
            path: { "${params.outdir}/salmon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QUANTIFY_SALMON:TXIMPORT' {
        ext.prefix = { "${quant_type}.merged" }
        publishDir = [
            path: { "${params.outdir}/salmon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PRE_VARIANTCALLING:PICARD_COLLECTMULTIPLEMETRICS' {
        ext.args   = '--VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            [
                path: { "${params.outdir}/picard/picard_metrics" },
                mode: params.publish_dir_mode,
                pattern: "*_metrics"
            ],
            [
                path: { "${params.outdir}/picard/picard_metrics/pdf" },
                mode: params.publish_dir_mode,
                pattern: "*.pdf"
            ]
        ]
    }

    withName: '.*:PRE_VARIANTCALLING:PICARD_ADDORREPLACEREADGROUPS' {
        ext.args = { [
            "--RGLB seq",
            "--RGPL ${params.picard_platform}",
            "--RGPU unit1",
            "--RGSM ${meta.id}",
            "--CREATE_INDEX ${params.picard_create_index}"
            ].join(' ').trim() }
        ext.prefix = { "${meta.id}.addorreplacereadgroups" }
        publishDir = [
            path: { "${params.outdir}/picard/addorreplacereadgroups" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PRE_VARIANTCALLING:PICARD_CREATESEQUENCEDICTIONARY' {
        ext.prefix = { "${fasta.getBaseName()}" }
        publishDir = [
            path: { "${params.outdir}/picard/createsequencedictionary" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PRE_VARIANTCALLING:PICARD_MARKDUPLICATES' {
        ext.args   = '--CREATE_INDEX true --ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
        ext.prefix = { "${meta.id}.markdup.sorted" }
        publishDir = [
            [
                path: { "${params.outdir}/picard/picard_metrics" },
                mode: params.publish_dir_mode,
                pattern: '*metrics.txt'
            ],
            [
                path: { "${params.outdir}/picard/markduplicates/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.bam'
            ]
        ]
    }

    withName: 'GATK4_SPLITNCIGARREADS' {
        ext.args       =  '--create-output-bam-index true'
        publishDir     = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/gatk/splitncigarreads/" },
                pattern: '*.bam'
        ]
    }

    withName: 'GATK4_BASERECALIBRATOR' {
        ext.prefix       = { "${meta.id}.recal" }
        ext.args    =  '--use-original-qualities'
        publishDir  = [ enabled: false ]
    }

    withName: 'GATK4_APPLYBQSR' {
        ext.args       =  '--create-output-bam-index true'
        ext.prefix       = { "${meta.id}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/gatk/applybqsr/" },
            pattern: "*bam"
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT_BAMRG' {
        ext.prefix = { "${meta.id}.readgroup.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/picard/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT_BAMMARKDUP' {
        ext.prefix = { "${meta.id}.markdup.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/picard/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: GATK4_MUTECT2 {
        ext.args = {"-emit-lod ${params.emit_threshold} --f1r2-tar-gz ${meta.id}.f1r2.tar.gz"}
        publishDir = [
            path: { "${params.outdir}/gatk/mutect2/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{vcf.gz,tbi,f1r2.tar.gz}'
        ]
    }

    withName: GATK4_COUNTVARIANTS {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/gatk/countvariants/" },
            mode: params.publish_dir_mode,
            pattern: '*_counts'
        ]
    }

    withName: GATK4_GETPILEUPSUMMARIES {
        publishDir = [
            path: { "${params.outdir}/gatk/getpileupsummaries/" },
            mode: params.publish_dir_mode,
            pattern: '*.pileups.table'
        ]
    }

    withName: GATK4_LEARNREADORIENTATIONMODEL {
        publishDir = [
            path: { "${params.outdir}/gatk/learnreadorientationmodel/" },
            mode: params.publish_dir_mode,
            pattern: '*.tar.gz'
        ]
    }

    withName: GATK4_CALCULATECONTAMINATION {
        ext.args   = { "-tumor-segmentation ${meta.id}.segmentation.table" }
    publishDir = [
            path: { "${params.outdir}/gatk/calculatecontamination/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.{contamination.table,segmentation.table}'
        ]
    }

    withName: GATK4_FILTERMUTECTCALLS {
        ext.prefix = { "${meta.id}.filtered" }
        publishDir = [
            path: { "${params.outdir}/gatk/filtermutectcalls/" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz'
        ]
    }

    withName: BCFTOOLS_VIEW {
        ext.args = "-f ${params.f_bcftools} --output-type z"
        publishDir = [
            path: { "${params.outdir}/bcftools/view/" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz'
        ]
    }

    withName: BCFTOOLS_INDEX {
        ext.args = '-t'
        publishDir = [
            path: { "${params.outdir}/bcftools/index/" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz.tbi'
        ]
    }

    withName: GATK4_SELECTVARIANTS {
        ext.args = '--select-type-to-include SNP'
        ext.prefix = { "${meta.id}.selected" }
        publishDir = [
            path: { "${params.outdir}/gatk/selectvariants/" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz'
        ]
    }

    withName: '.*:BATCH_REMOVAL_ANALYSIS:BATCH_REMOVAL' {
        publishDir = [
            path: { "${params.outdir}/batch_removal" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:BATCH_REMOVAL_ANALYSIS:PCA_SAMPLE_CLUSTERING' {
        publishDir = [
            path: { "${params.outdir}/batch_removal_pca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ARCASHLA_EXTRACT' {
        publishDir = [
            path: { "${params.outdir}/arcashla/extract" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ARCASHLA_GENOTYPE' {
        publishDir = [
            path: { "${params.outdir}/arcashla/genotype" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'ARCASHLA_MERGE' {
        publishDir = [
            path: { "${params.outdir}/arcashla/merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'ARCASHLA_CONVERT' {
        publishDir = [
            path: { "${params.outdir}/arcashla/convert" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'ARCASHLA_PLOT' {
        publishDir = [
            path: { "${params.outdir}/arcashla/plot" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:VARIANT_ANNOTATION:ENSEMBLVEP_DOWNLOAD' {
        ext.args = '--AUTO cf'
    }

    withName: '.*:VARIANT_ANNOTATION:ENSEMBLVEP_VEP' {
        ext.args = '--plugin Frameshift --plugin Wildtype'
        ext.prefix = { "${meta.id}.annotated" }
        publishDir = [
            path: { "${params.outdir}/ensemblvep/vep" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:EPITOPE_PREDICTION:TX2GENE' {
        publishDir = [
            path: { "${params.outdir}/pvacseq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:EPITOPE_PREDICTION:TXIMPORT' {
        ext.prefix = { "${quant_type}.merged" }
        publishDir = [
            path: { "${params.outdir}/pvacseq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:EPITOPE_PREDICTION:BATCH_REMOVAL' {
        publishDir = [
            path: { "${params.outdir}/pvacseq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
