/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: '.*:PREPROCESS_STAR:STAR_ALIGN' {
        ext.args   = '--readFilesCommand zcat --outReadsUnmapped None --chimSegmentMin 12 --chimJunctionOverhangMin 12 --chimOutJunctionFormat 1 --alignSJDBoverhangMin 10 --alignMatesGapMax 1000000 --alignIntronMax 1000000 --alignSJstitchMismatchNmax 5 -1 5 5 --outSAMstrandField intronMotif --outSAMunmapped Within --chimMultimapScoreRange 10 --chimMultimapNmax 10 --chimNonchimScoreDropMin 10 --peOverlapNbasesMin 12 --peOverlapMMp 0.1 --genomeLoad NoSharedMemory --outSAMheaderHD @HD VN:1.4 --twopassMode Basic --quantMode TranscriptomeSAM'
        publishDir = [
            [
                path: { "${params.outdir}/star/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { params.save_align_intermeds ? "${params.outdir}/star" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                saveAs: { params.save_align_intermeds ? it : null }
            ],
            [
                path: { params.save_unaligned ? "${params.outdir}/star/unmapped" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                saveAs: { params.save_unaligned ? it : null }
            ]
        ]
    }

    withName: '.*:QUANTIFY_SALMON:SALMON_QUANT' {
            ext.args   = { params.extra_salmon_quant_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/salmon" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
            ]
        }

    withName: '.*:QUANTIFY_SALMON:TX2GENE' {
        publishDir = [
            path: { "${params.outdir}/salmon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:QUANTIFY_SALMON:TXIMPORT' {
        ext.prefix = { "${quant_type}.merged" }
        publishDir = [
            path: { "${params.outdir}/salmon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GATK4_MUTECT2 {
        ext.args = "-emit-lod ${params.emit_threshold}"
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/3.Sorting" },
            mode: params.publish_dir_mode,
            pattern: '*.{vcf.gz,tbi,f1r2.tar.gz }'
        ]
    }

    withName: GATK4_COUNTVARIANTS {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/3.Sorting" },
            mode: params.publish_dir_mode,
            pattern: '*_counts'
        ]
    }

    withName: GATK4_GETPILEUPSUMMARIES {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/4.Filtering" },
            mode: params.publish_dir_mode,
            pattern: '*.pileups.table'
        ]
    }

    withName: GATK4_LEARNREADORIENTATIONMODEL {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/4.Filtering" },
            mode: params.publish_dir_mode,
            pattern: '*.tar.gz'
        ]
    }

    withName: GATK4_CALCULATECONTAMINATION {
        //ext.args = "-tumor-segmentation ${params.segmentation}"
        //ext.args = "-tumor-segmentation ${params.segmentation}"
    publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/4.Filtering" },
            mode: params.publish_dir_mode,
            pattern: '*.{contamination.table, segmentation.table}'
        ]
    }

    withName: GATK4_FILTERMUTECTCALLS {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/4.Filtering" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz'
        ]
    }

    withName: BCFTOOLS_VIEW {
        ext.args = "-f ${params.f_bcftools}"
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/4.Filtering" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz'
        ]
    }

    withName: BCFTOOLS_INDEX {
        ext.args = '-t'
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/4.Filtering" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz.tbi'
        ]
    }

    withName: GATK4_SELECTVARIANTS {
        ext.args = '--select-type-to-include SNP'
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}_Tumor/${meta.id}/4.Filtering" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
