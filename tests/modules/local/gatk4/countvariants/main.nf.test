nextflow_process {

    name "Test Process GATK4_COUNTVARIANTS"
    script "modules/local/gatk4/countvariants/main.nf"
    process "GATK4_COUNTVARIANTS"
/*
// Missing output file(s) `*_counts` expected by process `GATK4_COUNTVARIANTS (SRR8281226)`
//Test will fail due to the file naming convention
    test("Should run without failures") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            process {
                """
                // define inputs of the process here. Example:
                input[0] = Channel.of([
                    [ id:'test' ], 
                    [ file("$projectDir/tests/test_result/gatk/test.selected.vcf.gz", checkIfExists: true) ]
                ])

                input[1] = Channel.of([
                    [ id:'test' ], 
                    [ file("$projectDir/tests/test_result/gatk/test.selected.vcf.gz.tbi", checkIfExists: true) ]
                ])
                """
            }
        }

        then {
            assert process.success
            //assert process.out.counts
            assert process.out.versions
            assert snapshot(process.out).match()
        }

    }
*/
    test("Should run with options \"-stub\"") {
        options "-stub"
        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            process {
                """
                // define inputs of the process here. Example:
                input[0] = Channel.of([
                    [ id:'test' ], 
                    [ file("$projectDir/tests/test_result/gatk/test.selected.vcf.gz", checkIfExists: true) ]
                ])

                input[1] = Channel.of([
                    [ id:'test' ], 
                    [ file("$projectDir/tests/test_result/gatk/test.selected.vcf.gz.tbi", checkIfExists: true) ]
                ])
                """
            }
        }

        then {
            assert process.success
            assert process.out.counts
            assert process.out.versions
            assert snapshot(process.out).match()
        }

    }

}
